// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int freeList;
    static int freeListSize;
    static int freeListNext;
    static Array ram;
    static Array heap;
    
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let freeListSize = 14335;
        let freeListNext = 0;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int addr, block, pastAddr;
        let addr = freeList;
        let pastAddr = freeList;

        while((size + 2) > ram[addr + 1]) {
            if(ram[addr] = 0) {
                do Sys.error(2);
            }
            let addr = ram[addr];
            let pastAddr = addr;
        }
        let block = addr + ram[addr + 1] - 1 - size;
        let ram[block + 1] = size;
        //We remove the pointer to the block if it's size = segment.size
        if(block = addr) {
            let ram[pastAddr] = ram[addr];
        } else {
            let ram[addr + 1] = ram[addr + 1] - (size + 2);
        }
        
        if (ram[addr + 1] < 1) {
            let ram[pastAddr] = ram[addr];
        }
        if (freeList = pastAddr) {
            let freeListNext = ram[freeList];
            let freeListSize = ram[freeList + 1];
        }
        if (freeList = addr) {
            let freeListNext = ram[freeList];
            let freeListSize = ram[freeList + 1];
        }
        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int addr;
        let addr = freeList;
        while(true) {
            if (ram[addr] = 0) {
                let ram[addr] = o - 2;
                let ram[o - 2] = 0;
                if (addr = freeList) {
                    let freeListNext = o - 2;
                }
                return;
            }
            let addr = ram[addr];
        }
        do Sys.error(2);
        return;
    }    
}
